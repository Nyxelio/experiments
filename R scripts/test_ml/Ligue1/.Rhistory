table(dataTraining)
str(dataTraining)
?rep
length(teams)
rep(0.001,length(teams))
mu<-0.001
# Set les vecteurs a et b, avec 36 enregistrements (le nombre d'équipes) identiques
a<-rep(0.001,length(teams))
b<-rep(0.001,length(teams))
# Set tau
tau<-0.001
theta<-c()
for(i in 1:length(teams))
{
theta<-c(theta,a[i],b[i])
}
theta
levels(teams)
dataLigue1$HomeTeam <- factor(dataLigue1$HomeTeam)
dataLigue1$AwayTeam <- factor(dataLigue1$AwayTeam)
levels(dataLigue1$Date)
dataLigue1$Date <- factor(dataLigue1$Date)
str(dataLigue1$FTR)
str(dataLigue1)
dataLigue1[which(dataLigue1$Date == '17/05/2014'),]
dataTraining <- dataLigue1[1:2660,]
mu<-0.001
# Set les vecteurs a et b, avec 36 enregistrements (le nombre d'équipes) identiques
a<-rep(0.001,length(teams))
b<-rep(0.001,length(teams))
# Set tau
tau<-0.001
theta<-c()
for(i in 1:length(teams))
{
theta<-c(theta,a[i],b[i])
}
theta
length(theta)
length(teams)
theta<-c(theta,mu,tau)
theta
?optim
?dpois
mu<-0.001
# Set les vecteurs a et b, avec 36 enregistrements (le nombre d'équipes) identiques
a<-rep(0.001,length(teams))
b<-rep(0.001,length(teams))
# Set tau
tau<-0.001
theta<-c()
for(i in 1:length(teams))
{
theta<-c(theta,a[i],b[i])
}
theta<-c(theta,mu,tau)
# La méthode loglik.final calcule la probabilité qu'une équipe gagne
# Elle calcule pour cela le lambda home et lamba away, qui sont les moyennes pour l'équipe (home ou away), pondérés par la constante mu et par tau (pour prendre en compte une équipe jouant à domicile)
loglik.final<- function(theta,i,j,n.teams,home.goals,away.goals)
{
a.i <- theta[2*i-1]
b.i <- theta[2*i]
a.j <- theta[2*j-1]
b.j <- theta[2*j]
mu  <- theta[2*n.teams+1]
tau <- theta[2*n.teams+2]
# ici a et b représentent les paramètres d'attaque et de défense.
lambda.home <- exp(mu+ a.i + b.j + tau)
lambda.away <- exp(mu+ a.j + b.i)
loglik <- sum(dpois(home.goals,lambda.home,log=T)) + sum(dpois(away.goals,lambda.away,log=T))
return(-loglik)
}
# La méthode optim optimise le jeu de données en appliquant des contraintes aux bornes (via la méthode L-BFGS-B).
est.test<-optim(c(rep(0.001,length(theta))), loglik.final, n.teams=length(teams),
i=dataTraining$home.team, j=dataTraining$away.team,
home.goals=dataTraining$FTHG, away.goals=dataTraining$FTAG, method = "L-BFGS-B")
est.test
nrow(dataLigue1)
dataTesting <- dataLigue1[2661:nrow(dataLigue1),]
dataTesting <- dataLigue1[2661:nrow(dataLigue1),]
n.teams<-length(teams)
pred<-c()
for (k in 1:nrow(dataTesting))
{
l.x<-exp(est.test$par[2*n.teams+1] + est.test$par[2*dataTesting$home.team[k]-1] + est.test$par[2*dataTesting$away.team[k]] + est.test$par[2*n.teams+2])
l.y<-exp(est.test$par[2*n.teams+1] + est.test$par[2*dataTesting$away.team[k]-1] + est.test$par[2*dataTesting$home.team[k]])
v1<-c(0:max(dataLigue1$FTHG))
v2<-c(0:max(dataLigue1$FTAG))
prob.i<-c()
prob.j<-c()
for (i in 2:(max(dataLigue1$FTHG)+1))
{
for (j in 1:(i-1))
{
if (j>(max(dataLigue1$FTAG)+1)) break
prob.j[j]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
prob.i[i]<-sum(prob.j, na.rm=T)
}
home<-sum(prob.i[2:(max(dataLigue1$FTHG)+1)])
prob.i<-c()
prob.j<-c()
for (j in 2:(max(dataLigue1$FTAG)+1))
{
for (i in 1:(j-1))
{
prob.i[i]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
prob.j[j]<-sum(prob.i, na.rm=T)
}
away<-sum(prob.j[2:(max(dataLigue1$FTAG)+1)])
draw<-1-home-away
pred<-c(pred,home,draw,away)
}
predictions.test<-matrix(pred,ncol=3,byrow=TRUE)
dpred.test<-data.frame(home.team=dataTesting$HomeTeam, away.team=dataTesting$AwayTeam,
home.win=predictions.test[,1], draw=predictions.test[,2],
away.win=predictions.test[,3], result=dataTesting$FTR)
predictions.test
dpred.test
predictions.test
est.test
predictions.test<-matrix(pred,ncol=3,byrow=TRUE)
predictions.test
dpred.test<-data.frame(home.team=dataTesting$HomeTeam, away.team=dataTesting$AwayTeam,
dpred.test
q
predictions.test<-matrix(pred,ncol=3,byrow=TRUE)
dpred.test<-data.frame(home.team=dataTesting$HomeTeam, away.team=dataTesting$AwayTeam,
home.win=predictions.test[,1], draw=predictions.test[,2],
away.win=predictions.test[,3], result=dataTesting$FTR)
dpred.test
length(dpred.test)
nrow(dpred.test)
head(dpred.test)
head(dataLigue1$Testing)
head(dataTesting)
?round
round(0.269, digits = 1)
round(0.269, digits = 2)
good_result = 0
for(i in 1:nrow(dataTesting))
{
label = dataTesting[i,]$FTR
#selon les prédictions nous en déduisons le résultat du match
if((dpred.test[i,]$draw > dpred.test[i,]$home.win) & (dpred.test[i,]$draw > dpred.test[i,]$away.win))
{
# match nul
pred_res = 'D'
}
else if(dpred.test[i,]$home.win > dpred.test[i,]$away.win){
# équipe a domicile gagnante
pred_res = 'H'
}
else{
# équipe adverse gagnante
pred_res = 'A'
}
#nous comparons avec le résultat réel:
if(pred_res == label)
{
good_result = good_result + 1
}
}
# pour l'avoir en pourcentage
good_result / nrow(dataTesting) * 100
good_result = 0
for(i in 1:nrow(dataTesting))
{
label = dataTesting[i,]$FTR
#selon les prédictions nous en déduisons le résultat du match
if((dpred.test[i,]$draw > dpred.test[i,]$home.win) & (dpred.test[i,]$draw > dpred.test[i,]$away.win))
{
# match nul
pred_res = 'D'
}
else if(dpred.test[i,]$home.win > dpred.test[i,]$away.win){
# équipe a domicile gagnante
pred_res = 'H'
}
else{
# équipe adverse gagnante
pred_res = 'A'
}
pred_res
label
#nous comparons avec le résultat réel:
if(pred_res == label)
{
good_result = good_result + 1
}
}
# pour l'avoir en pourcentage
good_result / nrow(dataTesting) * 100
good_result = 0
for(i in 1:nrow(dataTesting))
{
label = dataTesting[i,]$FTR
#selon les prédictions nous en déduisons le résultat du match
if((dpred.test[i,]$draw > dpred.test[i,]$home.win) & (dpred.test[i,]$draw > dpred.test[i,]$away.win))
{
# match nul
pred_res = 'D'
}
else if(dpred.test[i,]$home.win > dpred.test[i,]$away.win){
# équipe a domicile gagnante
pred_res = 'H'
}
else{
# équipe adverse gagnante
pred_res = 'A'
}
print(pred_res)
print(label)
#nous comparons avec le résultat réel:
if(pred_res == label)
{
good_result = good_result + 1
}
}
# pour l'avoir en pourcentage
good_result / nrow(dataTesting) * 100
good_result = 0
for(i in 1:nrow(dataTesting))
{
label = dataTesting[i,]$FTR
#selon les prédictions nous en déduisons le résultat du match
if((dpred.test[i,]$draw > dpred.test[i,]$home.win) & (dpred.test[i,]$draw > dpred.test[i,]$away.win))
{
# match nul
pred_res = 'D'
}
else if(dpred.test[i,]$home.win > dpred.test[i,]$away.win){
# équipe a domicile gagnante
pred_res = 'H'
}
else{
# équipe adverse gagnante
pred_res = 'A'
}
print(pred_res)
print(label)
#nous comparons avec le résultat réel:
if(pred_res == label)
{
good_result = good_result + 1
print(good_result)
}
}
good_result = 0
for(i in 1:nrow(dataTesting))
{
label = dataTesting[i,]$FTR
#selon les prédictions nous en déduisons le résultat du match
if((dpred.test[i,]$draw > dpred.test[i,]$home.win) & (dpred.test[i,]$draw > dpred.test[i,]$away.win))
{
# match nul
pred_res = 'D'
}
else if(dpred.test[i,]$home.win > dpred.test[i,]$away.win){
# équipe a domicile gagnante
pred_res = 'H'
}
else{
# équipe adverse gagnante
pred_res = 'A'
}
print(pred_res)
print(label)
#nous comparons avec le résultat réel:
if(pred_res == label)
{
good_result = good_result + 1
print(good_result)
}
}
# pour l'avoir en pourcentage
precision = good_result / nrow(dataTesting) * 100
precision
good_result = 0
for(i in 1:nrow(dataTesting))
{
label = dataTesting[i,]$FTR
#selon les prédictions nous en déduisons le résultat du match
if((dpred.test[i,]$draw > dpred.test[i,]$home.win) & (dpred.test[i,]$draw > dpred.test[i,]$away.win))
{
# match nul
pred_res = 'D'
}
else if(dpred.test[i,]$home.win > dpred.test[i,]$away.win){
# équipe a domicile gagnante
pred_res = 'H'
}
else{
# équipe adverse gagnante
pred_res = 'A'
}
#nous comparons avec le résultat réel:
if(pred_res == label)
{
good_result = good_result + 1
print(good_result)
}
}
# pour l'avoir en pourcentage
precision = good_result / nrow(dataTesting) * 100
cat(precision, '%')
est.final<-optim(c(rep(0.001,length(theta))), loglik.final,
n.teams=length(teams), i=dataLigue1$home.team, j=dataLigue1$away.team,
home.goals=dataLigue1$FTHG, away.goals=dataLigue1$FTAG, method = "L-BFGS-B")
est.final
teams
nrow(team)x =
nrow(team)
nrow(teams)
length(teams)
next.day <- data.frame(HomeTeam, AwayTeam)
teams
for(i in 1:length(teams)){
team = teams[i]
for(j in 1:length(teams)){
awayteam = teams[j]
if(awayteam == team) {
next
}
next.day <- rbind(next.day, c(team, awayteam))
}
}
next.day <- data.frame(HomeTeam = c(), AwayTeam = c())
teams
for(i in 1:length(teams)){
team = teams[i]
for(j in 1:length(teams)){
awayteam = teams[j]
if(awayteam == team) {
next
}
next.day <- rbind(next.day, c(team, awayteam))
}
}
next.day
factor(teams)
next.day <- data.frame(HomeTeam = c('Montpellier', 'Monaco', 'Dijon', 'Nantes', 'Lyon', 'Bordeaux', 'Angers', 'Caen', 'Metz', 'Paris SG'),
AwayTeam = c('Marseille', 'Nancy', 'Guingamp','Toulouse, Bastia', 'Lorient', 'Lille', 'Nice', 'St Etienne', 'Rennes'))
next.day <- data.frame(HomeTeam = c('Montpellier', 'Monaco', 'Dijon', 'Nantes', 'Lyon', 'Bordeaux', 'Angers', 'Caen', 'Metz', 'Paris SG'),
AwayTeam = c('Marseille', 'Nancy', 'Guingamp','Toulouse, Bastia', 'Lorient', 'Lille', 'Nice', 'St Etienne', 'Rennes'))
next.day <- data.frame(HomeTeam = c('Montpellier', 'Monaco', 'Dijon', 'Nantes', 'Lyon', 'Bordeaux', 'Angers', 'Caen', 'Metz', 'Paris SG'),
AwayTeam = c('Marseille', 'Nancy', 'Guingamp','Toulouse', 'Bastia', 'Lorient', 'Lille', 'Nice', 'St Etienne', 'Rennes'))
next_day
next.day
next.day$home.team<-c()
next.day$away.team<-c()
for(k in 1:nrow(next.day))
{
next.day$home.team[k]<-match(next.day$HomeTeam[k],teams)
}
for(k in 1:nrow(next.day))
{
next.day$away.team[k]<-match(next.day$AwayTeam[k],teams)
}
n.teams<-length(teams)
pred<-c()
for (k in 1:nrow(next.day))
{
l.x<-exp(est.final$par[2*n.teams+1] + est.final$par[2*dataTesting$home.team[k]-1] + est.final$par[2*dataTesting$away.team[k]] + est.final$par[2*n.teams+2])
l.y<-exp(est.final$par[2*n.teams+1] + est.final$par[2*dataTesting$away.team[k]-1] + est.final$par[2*dataTesting$home.team[k]])
# vecteurs avec le nombre max de buts marqués par les deux équipes
v1<-c(0:max(dataLigue1$FTHG))
v2<-c(0:max(dataLigue1$FTAG))
prob.i<-c()
prob.j<-c()
# calcule de la probabilité de l'équipe à domicile gagnante
for (i in 2:(max(dataLigue1$FTHG)+1))
{
for (j in 1:(i-1))
{
if (j>(max(dataLigue1$FTAG)+1)) break
# produits de la probabilité que l'équipe à domicile marque le nombre de but v1[i] et que l'équipe extérieure marque j, en gardant toujours l'équipe à domicile gagnante.
prob.j[j]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
# somme des distributions de poisson précédentes
prob.i[i]<-sum(prob.j, na.rm=T)
}
home<-sum(prob.i[2:(max(dataLigue1$FTHG)+1)])
prob.i<-c()
prob.j<-c()
# le calcul inverse: probabilité que l'équipe adverse gagne
for (j in 2:(max(dataLigue1$FTAG)+1))
{
for (i in 1:(j-1))
{
# probabilité que l'équipe extérieure gagne avec le nombre de buts v1[i]
prob.i[i]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
prob.j[j]<-sum(prob.i, na.rm=T)
}
away<-sum(prob.j[2:(max(dataLigue1$FTAG)+1)])
# Le match nul est la probabilité restante
draw<-1-home-away
pred<-c(pred,home,draw,away)
}
predictions<-matrix(pred,ncol=3,byrow=TRUE)
# retourne un dataframe avec les rencontres et les 3 pourcentages prédits
dpred<-data.frame(home.team= next.day$HomeTeam, away.team= next.day$AwayTeam,
home.win=predictions[,1], draw=predictions[,2],
away.win=predictions[,3])
dpred
next.day$home.team<-c()
next.day$away.team<-c()
for(k in 1:nrow(next.day))
{
next.day$home.team[k]<-match(next.day$HomeTeam[k],teams)
}
for(k in 1:nrow(next.day))
{
next.day$away.team[k]<-match(next.day$AwayTeam[k],teams)
}
n.teams<-length(teams)
pred<-c()
for (k in 1:nrow(next.day))
{
l.x<-exp(est.final$par[2*n.teams+1] + est.final$par[2*dataTesting$home.team[k]-1] + est.final$par[2*dataTesting$away.team[k]] + est.final$par[2*n.teams+2])
l.y<-exp(est.final$par[2*n.teams+1] + est.final$par[2*dataTesting$away.team[k]-1] + est.final$par[2*dataTesting$home.team[k]])
# vecteurs avec le nombre max de buts marqués par les deux équipes
v1<-c(0:max(dataLigue1$FTHG))
v2<-c(0:max(dataLigue1$FTAG))
prob.i<-c()
prob.j<-c()
# calcule de la probabilité de l'équipe à domicile gagnante
for (i in 2:(max(dataLigue1$FTHG)+1))
{
for (j in 1:(i-1))
{
if (j>(max(dataLigue1$FTAG)+1)) break
# produits de la probabilité que l'équipe à domicile marque le nombre de but v1[i] et que l'équipe extérieure marque j, en gardant toujours l'équipe à domicile gagnante.
prob.j[j]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
# somme des distributions de poisson précédentes
prob.i[i]<-sum(prob.j, na.rm=T)
}
home<-sum(prob.i[2:(max(dataLigue1$FTHG)+1)])
prob.i<-c()
prob.j<-c()
# le calcul inverse: probabilité que l'équipe adverse gagne
for (j in 2:(max(dataLigue1$FTAG)+1))
{
for (i in 1:(j-1))
{
# probabilité que l'équipe extérieure gagne avec le nombre de buts v1[i]
prob.i[i]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
prob.j[j]<-sum(prob.i, na.rm=T)
}
away<-sum(prob.j[2:(max(dataLigue1$FTAG)+1)])
# Le match nul est la probabilité restante
draw<-1-home-away
pred<-c(pred,home,draw,away)
}
predictions<-matrix(pred,ncol=3,byrow=TRUE)
# retourne un dataframe avec les rencontres et les 3 pourcentages prédits
dpred<-data.frame(home.team= next.day$HomeTeam, away.team= next.day$AwayTeam,
home.win=predictions[,1], draw=predictions[,2],
away.win=predictions[,3])
dpred
source('~/Projects/R scripts/test_ml/procureur_nicolas.R', echo=TRUE)
n.teams<-length(teams)
pred.next<-c()
for (k in 1:nrow(next.day))
{
l.x<-exp(est.final$par[2*n.teams+1] + est.final$par[2*next.day$home.team[k]-1] + est.final$par[2*next.day$away.team[k]] + est.final$par[2*n.teams+2])
l.y<-exp(est.final$par[2*n.teams+1] + est.final$par[2*next.day$away.team[k]-1] + est.final$par[2*next.day$home.team[k]])
# vecteurs avec le nombre max de buts marqués par les deux équipes
v1<-c(0:max(dataLigue1$FTHG))
v2<-c(0:max(dataLigue1$FTAG))
prob.i<-c()
prob.j<-c()
# calcule de la probabilité de l'équipe à domicile gagnante
for (i in 2:(max(dataLigue1$FTHG)+1))
{
for (j in 1:(i-1))
{
if (j>(max(dataLigue1$FTAG)+1)) break
# produits de la probabilité que l'équipe à domicile marque le nombre de but v1[i] et que l'équipe extérieure marque j, en gardant toujours l'équipe à domicile gagnante.
prob.j[j]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
# somme des distributions de poisson précédentes
prob.i[i]<-sum(prob.j, na.rm=T)
}
home<-sum(prob.i[2:(max(dataLigue1$FTHG)+1)])
prob.i<-c()
prob.j<-c()
# le calcul inverse: probabilité que l'équipe adverse gagne
for (j in 2:(max(dataLigue1$FTAG)+1))
{
for (i in 1:(j-1))
{
# probabilité que l'équipe extérieure gagne avec le nombre de buts v1[i]
prob.i[i]<-dpois(v1[i],l.x,log=F)*dpois(v2[j],l.y,log=F)
}
prob.j[j]<-sum(prob.i, na.rm=T)
}
away<-sum(prob.j[2:(max(dataLigue1$FTAG)+1)])
# Le match nul est la probabilité restante
draw<-1-home-away
pred.next<-c(pred.next,home,draw,away)
}
predictions.next<-matrix(pred.next,ncol=3,byrow=TRUE)
# retourne un dataframe avec les rencontres et les 3 pourcentages prédits
dpred<-data.frame(home.team= next.day$HomeTeam, away.team= next.day$AwayTeam,
home.win=predictions.next[,1], draw=predictions.next[,2],
away.win=predictions.next[,3])
dpred
