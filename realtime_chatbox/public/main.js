// Generated by CoffeeScript 1.9.3
(function() {
  var $chatPage, $currentInput, $inputMessage, $loginPage, $messages, $usernameInput, $window, FADE_TIME, TYPING_TIMER_LENGTH, addChatMessage, addChatTyping, cleanInput, connected, lastTypingTime, sendMessage, setUsername, socket, typing, updateTyping, username;

  $window = $(window);

  $usernameInput = $('.usernameInput');

  $messages = $('.messages');

  $inputMessage = $('.inputMessage');

  $loginPage = $('.login.page');

  $chatPage = $('.chat.page');

  username = '';

  connected = false;

  typing = false;

  lastTypingTime = 0;

  $currentInput = $usernameInput.focus();

  FADE_TIME = 150;

  TYPING_TIMER_LENGTH = 400;

  socket = io();

  $window.keydown(function(event) {
    if (!(event.ctrlKey || event.metaKey || event.altKey)) {
      $currentInput.focus();
    }
    if (event.which === 13) {
      if (username) {
        sendMessage();
        socket.emit('stop typing');
        return typing = false;
      } else {
        return setUsername();
      }
    }
  });

  $loginPage.click(function() {
    return $currentInput.focus();
  });

  $inputMessage.click(function() {
    return $inputMessage.focus();
  });

  $inputMessage.on('input', function() {
    return updateTyping();
  });

  updateTyping = function() {
    if (connected) {
      if (!typing) {
        typing = true;
        socket.emit('typing');
      }
    }
    lastTypingTime = (new Date()).getTime();
    return setTimeout(function() {
      var timeDiff, typingTimer;
      typingTimer = (new Date()).getTime();
      timeDiff = typingTimer - lastTypingTime;
      if (timeDiff >= TYPING_TIMER_LENGTH && typing) {
        socket.emit('stop typing');
        return typing = false;
      }
    }, TYPING_TIMER_LENGTH);
  };

  setUsername = function() {
    username = cleanInput($usernameInput.val().trim());
    if (username) {
      $loginPage.fadeOut();
      $chatPage.show();
      $loginPage.off('click');
      $currentInput = $inputMessage.focus();
      return socket.emit('add user', username);
    }
  };

  cleanInput = (function(_this) {
    return function(input) {
      return $('<div/>').text(input).text();
    };
  })(this);

  sendMessage = (function(_this) {
    return function() {
      var message;
      message = $inputMessage.val();
      message = cleanInput(message);
      if (message && connected) {
        $inputMessage.val('');
        addChatMessage({
          username: username,
          message: message
        });
      }
      return socket.emit('new message', message);
    };
  })(this);

  addChatMessage = function(data) {
    return $messages.append($('<li>').text(data.username + " a écrit " + data.message));
  };

  addChatTyping = function(data) {
    data.typing = true;
    data.message = 'is typing';
    return addChatMessage(data);
  };

  socket.on('new message', (function(_this) {
    return function(data) {
      return addChatMessage(data);
    };
  })(this));

  socket.on('login', (function(_this) {
    return function() {
      connected = true;
      return $messages.append($('<li>').text("Bienvenue sur le chat !"));
    };
  })(this));

  socket.on('user connect', (function(_this) {
    return function(username) {
      return $messages.append($('<li>').text(username + " s'est connecté"));
    };
  })(this));

  socket.on('user disconnect', (function(_this) {
    return function(username) {
      return $messages.append($('<li>').text(username + " s'est déconnecté"));
    };
  })(this));

  socket.on('typing', (function(_this) {
    return function(data) {
      return addChatTyping(data);
    };
  })(this));

  socket.on('stop typing', (function(_this) {
    return function(data) {
      return removeChatTyping(data);
    };
  })(this));

}).call(this);

//# sourceMappingURL=main.js.map
